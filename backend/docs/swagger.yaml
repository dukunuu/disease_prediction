basePath: /
definitions:
  db.GetSymptomsForPatientDiseaseInstanceRow:
    properties:
      symptomDescription:
        $ref: '#/definitions/pgtype.Text'
      symptomID:
        type: integer
      symptomName:
        type: string
    type: object
  db.ListGeneralSymptomsForPatientRow:
    properties:
      createdAt:
        $ref: '#/definitions/pgtype.Timestamp'
      reportedDate:
        $ref: '#/definitions/pgtype.Date'
      symptomDescription:
        $ref: '#/definitions/pgtype.Text'
      symptomID:
        type: integer
      symptomName:
        type: string
      updatedAt:
        $ref: '#/definitions/pgtype.Timestamp'
    type: object
  db.PatientDisease:
    properties:
      createdAt:
        $ref: '#/definitions/pgtype.Timestamp'
      diagnosisDate:
        $ref: '#/definitions/pgtype.Date'
      diseaseID:
        type: integer
      notes:
        $ref: '#/definitions/pgtype.Text'
      patientDiseaseID:
        type: integer
      patientID:
        type: integer
      updatedAt:
        $ref: '#/definitions/pgtype.Timestamp'
    type: object
  db.PatientDiseaseSymptom:
    properties:
      createdAt:
        $ref: '#/definitions/pgtype.Timestamp'
      id:
        type: integer
      patientDiseaseID:
        type: integer
      symptomID:
        type: integer
      updatedAt:
        $ref: '#/definitions/pgtype.Timestamp'
    type: object
  db.PatientSymptom:
    properties:
      createdAt:
        $ref: '#/definitions/pgtype.Timestamp'
      id:
        type: integer
      patientID:
        type: integer
      reportedDate:
        $ref: '#/definitions/pgtype.Date'
      symptomID:
        type: integer
      updatedAt:
        $ref: '#/definitions/pgtype.Timestamp'
    type: object
  pgtype.Date:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        type: string
      valid:
        type: boolean
    type: object
  pgtype.InfinityModifier:
    enum:
    - 1
    - 0
    - -1
    type: integer
    x-enum-varnames:
    - Infinity
    - Finite
    - NegativeInfinity
  pgtype.Text:
    properties:
      string:
        type: string
      valid:
        type: boolean
    type: object
  pgtype.Timestamp:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        description: Time zone will be ignored when encoding to PostgreSQL.
        type: string
      valid:
        type: boolean
    type: object
  server.CreateDiseaseRequest:
    properties:
      disease_code:
        type: string
      disease_description:
        type: string
      disease_name:
        type: string
      disease_treatment:
        description: Accept raw JSON
        items:
          type: integer
        type: array
    type: object
  server.CreatePatientRequest:
    properties:
      address:
        description: Use pointer for optional field
        type: string
      age:
        type: integer
      birthdate:
        description: Expect YYYY-MM-DD string
        type: string
      email:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      phonenumber:
        type: string
      register:
        type: string
    type: object
  server.CreateSymptomRequest:
    properties:
      symptom_description:
        type: string
      symptom_name:
        description: Changed to string (required)
        type: string
    type: object
  server.DiseaseResponse:
    properties:
      created_at:
        allOf:
        - $ref: '#/definitions/pgtype.Timestamp'
        description: Or format as string
      disease_code:
        type: string
      disease_description:
        type: string
      disease_id:
        type: integer
      disease_name:
        type: string
      disease_treatment:
        description: Send raw JSON back
        items:
          type: integer
        type: array
      updated_at:
        allOf:
        - $ref: '#/definitions/pgtype.Timestamp'
        description: Or format as string
    type: object
  server.HTTPError:
    properties:
      error:
        description: Error message
        example: Resource not found
        type: string
    type: object
  server.LinkSymptomToDiseaseInstanceRequest:
    properties:
      symptom_id:
        type: integer
    type: object
  server.PatientDetailsResponse:
    properties:
      distinct_diseases_list:
        description: Parsed list from patient_disease
        items:
          type: string
        type: array
      email:
        type: string
      firstname:
        type: string
      general_symptoms_list:
        description: Parsed list from patient_symptoms
        items:
          type: string
        type: array
      lastname:
        type: string
      patient_id:
        type: integer
    type: object
  server.PatientDiseaseInstanceResponse:
    properties:
      created_at:
        $ref: '#/definitions/pgtype.Timestamp'
      diagnosis_date:
        $ref: '#/definitions/pgtype.Date'
      disease_code:
        description: Added from join
        type: string
      disease_id:
        type: integer
      disease_name:
        description: Added from join
        type: string
      notes:
        description: Keep as pointer
        type: string
      patient_disease_id:
        type: integer
      patient_id:
        description: Added for context
        type: integer
      updated_at:
        $ref: '#/definitions/pgtype.Timestamp'
    type: object
  server.PatientResponse:
    properties:
      address:
        description: string or null
        type: string
      age:
        type: integer
      birthdate:
        description: YYYY-MM-DD or null
        type: string
      email:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      patient_id:
        type: integer
      phonenumber:
        type: string
      register:
        type: string
    type: object
  server.PredictRequest:
    type: object
  server.PredictResponse:
    properties:
      predictions:
        example:
        - '["ClassA"'
        - ' "ClassB"]'
        items:
          type: string
        type: array
    type: object
  server.RecordPatientDiseaseInstanceRequest:
    properties:
      diagnosis_date:
        description: Use pointer for optional date
        type: string
      disease_id:
        type: integer
      notes:
        description: Use pointer for optional notes
        type: string
    type: object
  server.RecordPatientSymptomRequest:
    properties:
      reported_date:
        description: Use pointer for optional date
        type: string
      symptom_id:
        type: integer
    type: object
  server.SymptomResponse:
    properties:
      created_at:
        $ref: '#/definitions/pgtype.Timestamp'
      symptom_description:
        type: string
      symptom_id:
        type: integer
      symptom_name:
        description: Changed to string (cannot be null)
        type: string
      updated_at:
        $ref: '#/definitions/pgtype.Timestamp'
    type: object
  server.UpdateDiseaseRequest:
    properties:
      disease_code:
        type: string
      disease_description:
        type: string
      disease_name:
        type: string
      disease_treatment:
        description: Accept raw JSON
        items:
          type: integer
        type: array
    type: object
  server.UpdatePatientRequest:
    properties:
      address:
        type: string
      age:
        type: integer
      birthdate:
        description: Expect YYYY-MM-DD string
        type: string
      email:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      phonenumber:
        type: string
      register:
        type: string
    type: object
  server.UpdateSymptomRequest:
    properties:
      symptom_description:
        type: string
      symptom_name:
        description: Changed to string (required)
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Service for managing patients, symptoms, and diseases.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Patient API Service
  version: "1.0"
paths:
  /disease-instances/{instanceID}:
    delete:
      consumes:
      - application/json
      description: Remove a specific patient_disease entry by its unique ID (patient_disease_id).
        This also removes associated symptom links via ON DELETE CASCADE.
      parameters:
      - description: Patient Disease Instance ID
        format: int32
        in: path
        name: instanceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content (Successful removal)
          schema:
            type: string
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Delete a specific disease instance record
      tags:
      - Patient Relationships
  /disease-instances/{instanceID}/symptoms:
    get:
      consumes:
      - application/json
      description: Get all symptoms linked to a specific patient_disease record (diagnosis
        instance).
      parameters:
      - description: Patient Disease Instance ID
        format: int32
        in: path
        name: instanceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved symptoms for the instance
          schema:
            items:
              $ref: '#/definitions/db.GetSymptomsForPatientDiseaseInstanceRow'
            type: array
        "400":
          description: Invalid Instance ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Disease instance not found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: List symptoms for a specific disease instance
      tags:
      - Patient Relationships
    post:
      consumes:
      - application/json
      description: Create an association between an existing symptom and a specific
        patient disease instance.
      parameters:
      - description: Patient Disease Instance ID
        format: int32
        in: path
        name: instanceID
        required: true
        type: integer
      - description: Symptom ID to link
        in: body
        name: link
        required: true
        schema:
          $ref: '#/definitions/server.LinkSymptomToDiseaseInstanceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Symptom linked successfully
          schema:
            $ref: '#/definitions/db.PatientDiseaseSymptom'
        "400":
          description: Invalid Instance ID or request payload
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Disease instance or Symptom not found (FK constraint)
          schema:
            $ref: '#/definitions/server.HTTPError'
        "409":
          description: Symptom already linked to this instance (unique constraint)
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Link a symptom to a disease instance
      tags:
      - Patient Relationships
  /disease-instances/{instanceID}/symptoms/{symptomID}:
    delete:
      consumes:
      - application/json
      description: Remove the association between a symptom and a specific patient
        disease instance.
      parameters:
      - description: Patient Disease Instance ID
        format: int32
        in: path
        name: instanceID
        required: true
        type: integer
      - description: Symptom ID to unlink
        format: int32
        in: path
        name: symptomID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content (Successful removal)
          schema:
            type: string
        "400":
          description: Invalid Instance ID or Symptom ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Unlink a symptom from a disease instance
      tags:
      - Patient Relationships
  /diseases:
    get:
      consumes:
      - application/json
      description: Get a list of all diseases
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of diseases
          schema:
            items:
              $ref: '#/definitions/server.DiseaseResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: List diseases
      tags:
      - Diseases
    post:
      consumes:
      - application/json
      description: Add a new disease record
      parameters:
      - description: Disease data to create
        in: body
        name: disease
        required: true
        schema:
          $ref: '#/definitions/server.CreateDiseaseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Disease created successfully
          schema:
            $ref: '#/definitions/server.DiseaseResponse'
        "400":
          description: Invalid request payload or validation error
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Create a new disease
      tags:
      - Diseases
  /diseases/{diseaseID}:
    delete:
      consumes:
      - application/json
      description: Delete a disease record by ID
      parameters:
      - description: Disease ID
        format: int32
        in: path
        name: diseaseID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content (Successful deletion)
          schema:
            type: string
        "400":
          description: Invalid Disease ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Delete disease
      tags:
      - Diseases
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific disease by its ID
      parameters:
      - description: Disease ID
        format: int32
        in: path
        name: diseaseID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved disease
          schema:
            $ref: '#/definitions/server.DiseaseResponse'
        "400":
          description: Invalid Disease ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Disease not found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Get disease by ID
      tags:
      - Diseases
    put:
      consumes:
      - application/json
      description: Update details for an existing disease
      parameters:
      - description: Disease ID
        format: int32
        in: path
        name: diseaseID
        required: true
        type: integer
      - description: Disease data to update
        in: body
        name: disease
        required: true
        schema:
          $ref: '#/definitions/server.UpdateDiseaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Disease updated successfully
          schema:
            $ref: '#/definitions/server.DiseaseResponse'
        "400":
          description: Invalid request payload or validation error
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Disease not found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Update disease details
      tags:
      - Diseases
  /patient-symptoms/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a specific patient_symptoms entry by its unique ID.
      parameters:
      - description: Patient Symptom Record ID
        format: int32
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content (Successful removal)
          schema:
            type: string
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Delete a specific general symptom record
      tags:
      - Patient Relationships
  /patients:
    get:
      consumes:
      - application/json
      description: Get a paginated list of patients
      parameters:
      - default: 10
        description: Pagination limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Pagination offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of patients
          schema:
            items:
              $ref: '#/definitions/server.PatientResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: List patients
      tags:
      - Patients
    post:
      consumes:
      - application/json
      description: Add a new patient record to the database
      parameters:
      - description: Patient data to create
        in: body
        name: patient
        required: true
        schema:
          $ref: '#/definitions/server.CreatePatientRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Patient created successfully
          schema:
            $ref: '#/definitions/server.PatientResponse'
        "400":
          description: Invalid request payload or validation error
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error (e.g., DB error)
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Create a new patient
      tags:
      - Patients
  /patients/{patientID}:
    delete:
      consumes:
      - application/json
      description: Delete a patient record by ID. Associated records in junction tables
        (patient_symptoms, patient_disease) should be removed via ON DELETE CASCADE.
      parameters:
      - description: Patient ID
        format: int32
        in: path
        name: patientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content (Successful deletion)
          schema:
            type: string
        "400":
          description: Invalid Patient ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Delete patient
      tags:
      - Patients
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific patient by their ID
      parameters:
      - description: Patient ID
        format: int32
        in: path
        name: patientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved patient
          schema:
            $ref: '#/definitions/server.PatientResponse'
        "400":
          description: Invalid Patient ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Patient not found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Get patient by ID
      tags:
      - Patients
    put:
      consumes:
      - application/json
      description: Update details for an existing patient
      parameters:
      - description: Patient ID
        format: int32
        in: path
        name: patientID
        required: true
        type: integer
      - description: Patient data to update
        in: body
        name: patient
        required: true
        schema:
          $ref: '#/definitions/server.UpdatePatientRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Patient updated successfully
          schema:
            $ref: '#/definitions/server.PatientResponse'
        "400":
          description: Invalid request payload or validation error
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Patient not found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Update patient details
      tags:
      - Patients
  /patients/{patientID}/details:
    get:
      consumes:
      - application/json
      description: Retrieve patient details along with aggregated lists of their general
        symptoms and distinct diseases recorded. Uses the GetPatientSummary query.
      parameters:
      - description: Patient ID
        format: int32
        in: path
        name: patientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved patient summary details
          schema:
            $ref: '#/definitions/server.PatientDetailsResponse'
        "400":
          description: Invalid Patient ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Patient not found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Get patient summary details
      tags:
      - Patients
  /patients/{patientID}/disease-instances:
    get:
      consumes:
      - application/json
      description: Get all recorded disease instances (diagnoses) for a given patient
        ID.
      parameters:
      - description: Patient ID
        format: int32
        in: path
        name: patientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved disease instances
          schema:
            items:
              $ref: '#/definitions/server.PatientDiseaseInstanceResponse'
            type: array
        "400":
          description: Invalid Patient ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: List disease instances for a specific patient
      tags:
      - Patient Relationships
    post:
      consumes:
      - application/json
      description: Create a record of a specific disease diagnosis for a patient,
        with optional date and notes.
      parameters:
      - description: Patient ID
        format: int32
        in: path
        name: patientID
        required: true
        type: integer
      - description: Disease ID, optional diagnosis date and notes
        in: body
        name: instance
        required: true
        schema:
          $ref: '#/definitions/server.RecordPatientDiseaseInstanceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Disease instance recorded successfully
          schema:
            $ref: '#/definitions/db.PatientDisease'
        "400":
          description: Invalid Patient ID or request payload
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Patient or Disease not found (FK constraint)
          schema:
            $ref: '#/definitions/server.HTTPError'
        "409":
          description: Duplicate instance for this patient/disease/date (unique constraint)
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Record a disease instance for a patient
      tags:
      - Patient Relationships
  /patients/{patientID}/general-symptoms:
    get:
      consumes:
      - application/json
      description: Get all symptoms associated with a given patient ID via the patient_symptoms
        table (not linked to specific diagnoses).
      parameters:
      - description: Patient ID
        format: int32
        in: path
        name: patientID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved general symptoms for patient
          schema:
            items:
              $ref: '#/definitions/db.ListGeneralSymptomsForPatientRow'
            type: array
        "400":
          description: Invalid Patient ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: List general symptoms reported by a patient
      tags:
      - Patient Relationships
    post:
      consumes:
      - application/json
      description: Associate an existing symptom with a patient (not tied to a specific
        diagnosis instance). Optionally include the date it was reported.
      parameters:
      - description: Patient ID
        format: int32
        in: path
        name: patientID
        required: true
        type: integer
      - description: Symptom ID and optional reported date
        in: body
        name: symptom
        required: true
        schema:
          $ref: '#/definitions/server.RecordPatientSymptomRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Symptom recorded successfully
          schema:
            $ref: '#/definitions/db.PatientSymptom'
        "400":
          description: Invalid Patient ID or request payload
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Patient or Symptom not found (FK constraint)
          schema:
            $ref: '#/definitions/server.HTTPError'
        "409":
          description: Relationship already exists for this date (unique constraint)
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Record a general symptom for a patient
      tags:
      - Patient Relationships
  /predict:
    post:
      consumes:
      - application/json
      description: Accepts feature data in JSON format, forwards it to the configured
        Flask ML service, and returns the prediction result. The 'features' field
        in the request body can be a single JSON object or an array of JSON objects.
      parameters:
      - description: Prediction Request Features (single object or array of objects)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.PredictRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful prediction response (forwarded from Flask)
          schema:
            $ref: '#/definitions/server.PredictResponse'
        "400":
          description: Bad Request - Invalid JSON format or missing 'features' key
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal Server Error - Error during proxy processing or creating
            request
          schema:
            $ref: '#/definitions/server.HTTPError'
        "502":
          description: Bad Gateway - Failed to contact or get a valid response from
            the backend Flask service
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Proxy Prediction Request
      tags:
      - predictions
  /symptoms:
    get:
      consumes:
      - application/json
      description: Get a list of all symptoms
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of symptoms
          schema:
            items:
              $ref: '#/definitions/server.SymptomResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: List symptoms
      tags:
      - Symptoms
    post:
      consumes:
      - application/json
      description: Add a new symptom record. Symptom name is required.
      parameters:
      - description: Symptom data to create
        in: body
        name: symptom
        required: true
        schema:
          $ref: '#/definitions/server.CreateSymptomRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Symptom created successfully
          schema:
            $ref: '#/definitions/server.SymptomResponse'
        "400":
          description: Invalid request payload or missing symptom name
          schema:
            $ref: '#/definitions/server.HTTPError'
        "409":
          description: Symptom name already exists (unique constraint)
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Create a new symptom
      tags:
      - Symptoms
  /symptoms/{symptomID}:
    delete:
      consumes:
      - application/json
      description: Delete a symptom record by ID. Associated records in junction tables
        (patient_symptoms, patient_disease_symptom) should be removed via ON DELETE
        CASCADE.
      parameters:
      - description: Symptom ID
        format: int32
        in: path
        name: symptomID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content (Successful deletion)
          schema:
            type: string
        "400":
          description: Invalid Symptom ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Delete symptom
      tags:
      - Symptoms
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific symptom by its ID
      parameters:
      - description: Symptom ID
        format: int32
        in: path
        name: symptomID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved symptom
          schema:
            $ref: '#/definitions/server.SymptomResponse'
        "400":
          description: Invalid Symptom ID format
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Symptom not found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Get symptom by ID
      tags:
      - Symptoms
    put:
      consumes:
      - application/json
      description: Update details for an existing symptom. Symptom name is required.
      parameters:
      - description: Symptom ID
        format: int32
        in: path
        name: symptomID
        required: true
        type: integer
      - description: Symptom data to update
        in: body
        name: symptom
        required: true
        schema:
          $ref: '#/definitions/server.UpdateSymptomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Symptom updated successfully
          schema:
            $ref: '#/definitions/server.SymptomResponse'
        "400":
          description: Invalid request payload or missing symptom name
          schema:
            $ref: '#/definitions/server.HTTPError'
        "404":
          description: Symptom not found
          schema:
            $ref: '#/definitions/server.HTTPError'
        "409":
          description: Symptom name already exists (unique constraint)
          schema:
            $ref: '#/definitions/server.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.HTTPError'
      summary: Update symptom details
      tags:
      - Symptoms
schemes:
- http
- https
swagger: "2.0"
